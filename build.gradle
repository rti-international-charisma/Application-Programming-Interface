buildscript {
    repositories {
        jcenter()
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
    }
}
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'jacoco'

group 'com.rti.charisma.api'
version = '1.0-SNAPSHOT'

mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = ['src']
    test.kotlin.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-server-host-common:$ktor_version"
    implementation "io.ktor:ktor-locations:$ktor_version"

    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-client-jackson:$ktor_version"

    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-client-logging:$ktor_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"

    compile "io.ktor:ktor-auth-jwt:$ktor_version"
    compile "io.ktor:ktor-jackson:$ktor_version"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    compile 'io.github.microutils:kotlin-logging:1.5.9'

    compile "org.jetbrains.exposed:exposed-core:$exposedVersion"
    compile "org.jetbrains.exposed:exposed-dao:$exposedVersion"
    compile "org.jetbrains.exposed:exposed-jdbc:$exposedVersion"
    compile "com.zaxxer:HikariCP:4.0.2"
    compile "org.postgresql:postgresql:42.2.18"
    implementation "com.viartemev:ktor-flyway-feature:1.2.2"



    testImplementation "org.junit.jupiter:junit-jupiter:5.7.0"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    testImplementation "io.mockk:mockk:1.10.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines"
    testImplementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
    testCompile "io.ktor:ktor-server-test-host:$ktor_version"
    testCompile "org.testcontainers:testcontainers:1.15.2"
    testCompile "org.testcontainers:junit-jupiter:1.15.2"
    testCompile "com.h2database:h2:1.4.200"
    testCompile "io.rest-assured:rest-assured:3.3.0"
    testCompile "com.github.tomakehurst:wiremock-jre8-standalone:2.28.0"
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
}


test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

shadowJar {
    archivesBaseName = 'charisma-api-fat'
    archiveClassifier.set('')
    archiveVersion.set('')
}


jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
        html.destination = file("${buildDir}/jacocoHtml")

    }
    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.73
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

check.dependsOn jacocoTestReport

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=io.ktor.util.KtorExperimentalAPI"]
}