name: Deploy API to Amazon ECS Production

on:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    services:
      postgres:
        # Docker Hub PostgreSQL image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: charisma
          POSTGRES_PASSWORD: pass123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    env:
      db_url: jdbc:postgresql://localhost:5432/charisma

    steps:
    
    - name: Checkout source code
      uses: actions/checkout@v1
      
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
         java-version: 1.8

    - name: Build with Gradle
      run: ./gradlew clean build --info
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1 
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_PRODUCTION }}
        IMAGE_TAG: latest
      run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .aws/tasks/service/production/task-definition.json
        container-name: ${{ secrets.AWS_CONTAINER_NAME_PRODUCTION }}
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.SERVICE_NAME_PRODUCTION }}
        cluster: ${{ secrets.AWS_CLUSTER_PRODUCTION }}
        wait-for-service-stability: true
